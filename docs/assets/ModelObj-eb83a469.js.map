{"version":3,"file":"ModelObj-eb83a469.js","sources":["../../node_modules/three-stdlib/loaders/DDSLoader.js","../../src/pages/groupIntro/cscecInter/ModelObj.tsx"],"sourcesContent":["import { CompressedTextureLoader, RGBAFormat, RGB_ETC1_Format, RGBA_S3TC_DXT5_Format, RGBA_S3TC_DXT3_Format, RGB_S3TC_DXT1_Format } from \"three\";\nclass DDSLoader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n  parse(buffer, loadMipmaps) {\n    const dds = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 };\n    const DDS_MAGIC = 542327876;\n    const DDSD_MIPMAPCOUNT = 131072;\n    const DDSCAPS2_CUBEMAP = 512;\n    const DDSCAPS2_CUBEMAP_POSITIVEX = 1024;\n    const DDSCAPS2_CUBEMAP_NEGATIVEX = 2048;\n    const DDSCAPS2_CUBEMAP_POSITIVEY = 4096;\n    const DDSCAPS2_CUBEMAP_NEGATIVEY = 8192;\n    const DDSCAPS2_CUBEMAP_POSITIVEZ = 16384;\n    const DDSCAPS2_CUBEMAP_NEGATIVEZ = 32768;\n    const DDPF_FOURCC = 4;\n    function fourCCToInt32(value) {\n      return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n    }\n    function int32ToFourCC(value) {\n      return String.fromCharCode(value & 255, value >> 8 & 255, value >> 16 & 255, value >> 24 & 255);\n    }\n    function loadARGBMip(buffer2, dataOffset2, width, height) {\n      const dataLength = width * height * 4;\n      const srcBuffer = new Uint8Array(buffer2, dataOffset2, dataLength);\n      const byteArray = new Uint8Array(dataLength);\n      let dst = 0;\n      let src = 0;\n      for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n          const b = srcBuffer[src];\n          src++;\n          const g = srcBuffer[src];\n          src++;\n          const r = srcBuffer[src];\n          src++;\n          const a = srcBuffer[src];\n          src++;\n          byteArray[dst] = r;\n          dst++;\n          byteArray[dst] = g;\n          dst++;\n          byteArray[dst] = b;\n          dst++;\n          byteArray[dst] = a;\n          dst++;\n        }\n      }\n      return byteArray;\n    }\n    const FOURCC_DXT1 = fourCCToInt32(\"DXT1\");\n    const FOURCC_DXT3 = fourCCToInt32(\"DXT3\");\n    const FOURCC_DXT5 = fourCCToInt32(\"DXT5\");\n    const FOURCC_ETC1 = fourCCToInt32(\"ETC1\");\n    const headerLengthInt = 31;\n    const off_magic = 0;\n    const off_size = 1;\n    const off_flags = 2;\n    const off_height = 3;\n    const off_width = 4;\n    const off_mipmapCount = 7;\n    const off_pfFlags = 20;\n    const off_pfFourCC = 21;\n    const off_RGBBitCount = 22;\n    const off_RBitMask = 23;\n    const off_GBitMask = 24;\n    const off_BBitMask = 25;\n    const off_ABitMask = 26;\n    const off_caps2 = 28;\n    const header = new Int32Array(buffer, 0, headerLengthInt);\n    if (header[off_magic] !== DDS_MAGIC) {\n      console.error(\"THREE.DDSLoader.parse: Invalid magic number in DDS header.\");\n      return dds;\n    }\n    if (!header[off_pfFlags] & DDPF_FOURCC) {\n      console.error(\"THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.\");\n      return dds;\n    }\n    let blockBytes;\n    const fourCC = header[off_pfFourCC];\n    let isRGBAUncompressed = false;\n    switch (fourCC) {\n      case FOURCC_DXT1:\n        blockBytes = 8;\n        dds.format = RGB_S3TC_DXT1_Format;\n        break;\n      case FOURCC_DXT3:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT3_Format;\n        break;\n      case FOURCC_DXT5:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT5_Format;\n        break;\n      case FOURCC_ETC1:\n        blockBytes = 8;\n        dds.format = RGB_ETC1_Format;\n        break;\n      default:\n        if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 16711680 && header[off_GBitMask] & 65280 && header[off_BBitMask] & 255 && header[off_ABitMask] & 4278190080) {\n          isRGBAUncompressed = true;\n          blockBytes = 64;\n          dds.format = RGBAFormat;\n        } else {\n          console.error(\"THREE.DDSLoader.parse: Unsupported FourCC code \", int32ToFourCC(fourCC));\n          return dds;\n        }\n    }\n    dds.mipmapCount = 1;\n    if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n      dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n    }\n    const caps2 = header[off_caps2];\n    dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n    if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n      console.error(\"THREE.DDSLoader.parse: Incomplete cubemap faces\");\n      return dds;\n    }\n    dds.width = header[off_width];\n    dds.height = header[off_height];\n    let dataOffset = header[off_size] + 4;\n    const faces = dds.isCubemap ? 6 : 1;\n    for (let face = 0; face < faces; face++) {\n      let width = dds.width;\n      let height = dds.height;\n      for (let i = 0; i < dds.mipmapCount; i++) {\n        let byteArray, dataLength;\n        if (isRGBAUncompressed) {\n          byteArray = loadARGBMip(buffer, dataOffset, width, height);\n          dataLength = byteArray.length;\n        } else {\n          dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n          byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n        }\n        const mipmap = { data: byteArray, width, height };\n        dds.mipmaps.push(mipmap);\n        dataOffset += dataLength;\n        width = Math.max(width >> 1, 1);\n        height = Math.max(height >> 1, 1);\n      }\n    }\n    return dds;\n  }\n}\nexport {\n  DDSLoader\n};\n//# sourceMappingURL=DDSLoader.js.map\n","\nimport * as THREE from \"three\";\nimport { Canvas } from \"@react-three/fiber\";\n// import { useLoader } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\n// import { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\n// import { MTLLoader } from \"three/examples/jsm/loaders/MTLLoader\";\nimport { DDSLoader } from \"three-stdlib\";\nimport { Suspense } from \"react\";\n\nTHREE.DefaultLoadingManager.addHandler(/\\.dds$/i, new DDSLoader());\n\n// const Scene = () => {\n//   const materials = useLoader(MTLLoader, \"Poimandres.mtl\");\n//   const obj = useLoader(OBJLoader, \"Poimandres.obj\", (loader) => {\n//     materials.preload();\n//     loader.setMaterials(materials);\n//   });\n\n//   console.log(obj);\n//   return <primitive object={obj} scale={0.4} />;\n// };\n\nexport default function ModelObj() {\n  return (\n    <div className=\"ModelObj\">\n      <Canvas>\n        <Suspense fallback={null}>\n          {/* <Scene /> */}\n          <OrbitControls />\n          {/* <Environment preset=\"sunset\" background /> */}\n        </Suspense>\n      </Canvas>\n    </div>\n  );\n}\n"],"names":["DDSLoader","CompressedTextureLoader","manager","buffer","loadMipmaps","dds","DDS_MAGIC","DDSD_MIPMAPCOUNT","DDSCAPS2_CUBEMAP","DDSCAPS2_CUBEMAP_POSITIVEX","DDSCAPS2_CUBEMAP_NEGATIVEX","DDSCAPS2_CUBEMAP_POSITIVEY","DDSCAPS2_CUBEMAP_NEGATIVEY","DDSCAPS2_CUBEMAP_POSITIVEZ","DDSCAPS2_CUBEMAP_NEGATIVEZ","DDPF_FOURCC","fourCCToInt32","value","int32ToFourCC","loadARGBMip","buffer2","dataOffset2","width","height","dataLength","srcBuffer","byteArray","dst","src","y","x","b","g","r","a","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_ETC1","headerLengthInt","off_magic","off_size","off_flags","off_height","off_width","off_mipmapCount","off_pfFlags","off_pfFourCC","off_RGBBitCount","off_RBitMask","off_GBitMask","off_BBitMask","off_ABitMask","off_caps2","header","blockBytes","fourCC","isRGBAUncompressed","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGBAFormat","caps2","dataOffset","faces","face","i","mipmap","THREE.DefaultLoadingManager","ModelObj","jsx","Canvas","Suspense","OrbitControls"],"mappings":"gNACA,MAAMA,WAAkBC,EAAwB,CAC9C,YAAYC,EAAS,CACnB,MAAMA,CAAO,CACd,CACD,MAAMC,EAAQC,EAAa,CACzB,MAAMC,EAAM,CAAE,QAAS,CAAE,EAAE,MAAO,EAAG,OAAQ,EAAG,OAAQ,KAAM,YAAa,CAAC,EACtEC,EAAY,UACZC,EAAmB,OACnBC,EAAmB,IACnBC,EAA6B,KAC7BC,EAA6B,KAC7BC,EAA6B,KAC7BC,EAA6B,KAC7BC,EAA6B,MAC7BC,EAA6B,MAC7BC,EAAc,EACpB,SAASC,EAAcC,EAAO,CAC5B,OAAOA,EAAM,WAAW,CAAC,GAAKA,EAAM,WAAW,CAAC,GAAK,IAAMA,EAAM,WAAW,CAAC,GAAK,KAAOA,EAAM,WAAW,CAAC,GAAK,GACjH,CACD,SAASC,EAAcD,EAAO,CAC5B,OAAO,OAAO,aAAaA,EAAQ,IAAKA,GAAS,EAAI,IAAKA,GAAS,GAAK,IAAKA,GAAS,GAAK,GAAG,CAC/F,CACD,SAASE,EAAYC,EAASC,EAAaC,EAAOC,EAAQ,CACxD,MAAMC,EAAaF,EAAQC,EAAS,EAC9BE,EAAY,IAAI,WAAWL,EAASC,EAAaG,CAAU,EAC3DE,EAAY,IAAI,WAAWF,CAAU,EAC3C,IAAIG,EAAM,EACNC,EAAM,EACV,QAASC,EAAI,EAAGA,EAAIN,EAAQM,IAC1B,QAASC,EAAI,EAAGA,EAAIR,EAAOQ,IAAK,CAC9B,MAAMC,GAAIN,EAAUG,CAAG,EACvBA,IACA,MAAMI,GAAIP,EAAUG,CAAG,EACvBA,IACA,MAAMK,GAAIR,EAAUG,CAAG,EACvBA,IACA,MAAMM,GAAIT,EAAUG,CAAG,EACvBA,IACAF,EAAUC,CAAG,EAAIM,GACjBN,IACAD,EAAUC,CAAG,EAAIK,GACjBL,IACAD,EAAUC,CAAG,EAAII,GACjBJ,IACAD,EAAUC,CAAG,EAAIO,GACjBP,GACD,CAEH,OAAOD,CACR,CACD,MAAMS,EAAcnB,EAAc,MAAM,EAClCoB,EAAcpB,EAAc,MAAM,EAClCqB,EAAcrB,EAAc,MAAM,EAClCsB,EAActB,EAAc,MAAM,EAClCuB,EAAkB,GAClBC,EAAY,EACZC,EAAW,EACXC,EAAY,EACZC,EAAa,EACbC,EAAY,EACZC,EAAkB,EAClBC,EAAc,GACdC,EAAe,GACfC,EAAkB,GAClBC,EAAe,GACfC,EAAe,GACfC,EAAe,GACfC,EAAe,GACfC,EAAY,GACZC,EAAS,IAAI,WAAWnD,EAAQ,EAAGoC,CAAe,EACxD,GAAIe,EAAOd,CAAS,IAAMlC,EACxB,eAAQ,MAAM,4DAA4D,EACnED,EAET,GAAI,CAACiD,EAAOR,CAAW,EAAI/B,EACzB,eAAQ,MAAM,wEAAwE,EAC/EV,EAET,IAAIkD,EACJ,MAAMC,EAASF,EAAOP,CAAY,EAClC,IAAIU,EAAqB,GACzB,OAAQD,EAAM,CACZ,KAAKrB,EACHoB,EAAa,EACblD,EAAI,OAASqD,GACb,MACF,KAAKtB,EACHmB,EAAa,GACblD,EAAI,OAASsD,GACb,MACF,KAAKtB,EACHkB,EAAa,GACblD,EAAI,OAASuD,GACb,MACF,KAAKtB,EACHiB,EAAa,EACblD,EAAI,OAASwD,GACb,MACF,QACE,GAAIP,EAAON,CAAe,IAAM,IAAMM,EAAOL,CAAY,EAAI,UAAYK,EAAOJ,CAAY,EAAI,OAASI,EAAOH,CAAY,EAAI,KAAOG,EAAOF,CAAY,EAAI,WAC5JK,EAAqB,GACrBF,EAAa,GACblD,EAAI,OAASyD,OAEb,gBAAQ,MAAM,kDAAmD5C,EAAcsC,CAAM,CAAC,EAC/EnD,CAEZ,CACDA,EAAI,YAAc,EACdiD,EAAOZ,CAAS,EAAInC,GAAoBH,IAAgB,KAC1DC,EAAI,YAAc,KAAK,IAAI,EAAGiD,EAAOT,CAAe,CAAC,GAEvD,MAAMkB,EAAQT,EAAOD,CAAS,EAE9B,GADAhD,EAAI,UAAY,GAAA0D,EAAQvD,GACpBH,EAAI,YAAc,EAAE0D,EAAQtD,IAA+B,EAAEsD,EAAQrD,IAA+B,EAAEqD,EAAQpD,IAA+B,EAAEoD,EAAQnD,IAA+B,EAAEmD,EAAQlD,IAA+B,EAAEkD,EAAQjD,IAC3O,eAAQ,MAAM,iDAAiD,EACxDT,EAETA,EAAI,MAAQiD,EAAOV,CAAS,EAC5BvC,EAAI,OAASiD,EAAOX,CAAU,EAC9B,IAAIqB,EAAaV,EAAOb,CAAQ,EAAI,EACpC,MAAMwB,EAAQ5D,EAAI,UAAY,EAAI,EAClC,QAAS6D,EAAO,EAAGA,EAAOD,EAAOC,IAAQ,CACvC,IAAI5C,EAAQjB,EAAI,MACZkB,EAASlB,EAAI,OACjB,QAAS8D,EAAI,EAAGA,EAAI9D,EAAI,YAAa8D,IAAK,CACxC,IAAIzC,EAAWF,EACXiC,GACF/B,EAAYP,EAAYhB,EAAQ6D,EAAY1C,EAAOC,CAAM,EACzDC,EAAaE,EAAU,SAEvBF,EAAa,KAAK,IAAI,EAAGF,CAAK,EAAI,EAAI,KAAK,IAAI,EAAGC,CAAM,EAAI,EAAIgC,EAChE7B,EAAY,IAAI,WAAWvB,EAAQ6D,EAAYxC,CAAU,GAE3D,MAAM4C,EAAS,CAAE,KAAM1C,EAAW,MAAAJ,EAAO,OAAAC,CAAM,EAC/ClB,EAAI,QAAQ,KAAK+D,CAAM,EACvBJ,GAAcxC,EACdF,EAAQ,KAAK,IAAIA,GAAS,EAAG,CAAC,EAC9BC,EAAS,KAAK,IAAIA,GAAU,EAAG,CAAC,CACjC,CACF,CACD,OAAOlB,CACR,CACH,CCtIAgE,GAA4B,WAAW,UAAW,IAAIrE,EAAW,EAajE,SAAwBsE,IAAW,CACjC,OACGC,EAAA,IAAA,MAAA,CAAI,UAAU,WACb,eAACC,GACC,CAAA,SAAAD,EAAA,IAACE,GAAS,SAAA,CAAA,SAAU,KAElB,SAAAF,EAAA,IAACG,GAAc,CAAA,CAAA,CAEjB,CAAA,EACF,CACF,CAAA,CAEJ","x_google_ignoreList":[0]}